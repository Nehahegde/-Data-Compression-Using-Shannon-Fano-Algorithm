#include<iostream>
#include<bits/stdc++.h>
#include<vector>
#include<stdlib.h>
#include<math.h>
#include<fstream>
#include<windows.h>
using namespace std;

int actual;
class SF{ //class name is SF(Shannon Fano)
	public:
	int freq;
	char ch;
	string codw;
	void getd() //getdata function. for displaying data.
	{
		cout<<"Enter Character:";cin>>ch;
		cout<<"Enter Frequency:";cin>>freq;
		this->codw="";
	}
	void getd(char dh,int preq)
	{
		this->ch=dh;
		this->freq=preq;
		this->codw="";
	}

	void display()
	{
		cout<<"Character:"<<ch<<"     Frequency:"<<freq<<endl;
	}
	void cop() //displaying in terminal
	{
		cout<<"Code of "<<ch<<"="<<codw<<endl;
	}
};
SF pi[127]; //create an array pi[]

class chunks{
	public:
		string b8;
		char d8;
		int i8;
};
chunks cnks[500];
void shan(int s,int e)//Generating codeword function
{
	if(s<e)
	{
		int sum_1=0,sum_2=0;
		int mind=10000;
		int t=0;
		int diff=0;
		int pt;
		int i,j,k,cmp;

		for(cmp=0;cmp<(e-s);cmp++)
		{

			for(k=s;k<=s+cmp;k++)
			{
				sum_1=sum_1+pi[k].freq;
			}
			for(j=s+cmp+1;j<=e;j++)
			{
				sum_2=sum_2+pi[j].freq;
			}
			diff=abs(sum_2-sum_1);
			if(diff<=mind)
			{
				mind=diff;
				pt=cmp+s;
			}
			sum_1=0;
			sum_2=0;
		}
			for(i=s;i<=pt;i++)
			{
				pi[i].codw=pi[i].codw+"1";
			}
			cout<<endl;
			for(i=pt+1;i<=e;i++)
			{
				pi[i].codw=pi[i].codw+"0";
			}
			int tmpp=pt;
			shan(tmpp+1,e);
			shan(s,tmpp);
	}
}

void rdfile() //displaying and extracting from input file
{
	ifstream inFile;
  char ch;
	cout<<"\n\n\n======================================================================\n\n\n";
  cout<<"-------TEXT DATA COMPRESSION USING SHANNON FANO ALGORITHM------";
	cout<<"\n\n\n======================================================================\n\n\n\n";
  cout<<"-------PRESENTED BY:---------\n\n";
	cout<<"NAME : RASHA(4SF19IS081)    NEHA(4SF19IS056)\nBRANCH : INFORMATION SCIENCE AND ENGINEERING\nCLASS : 6A\n\n";
  Sleep(500);
  cout<<" ";
  Sleep(500);
  cout<<" ";
  Sleep(500);
  cout<<" ";
  cout<<"\n\n\n------WORKING OF THE ALGORITHM-------\n\nSTAGE 1. Create a test.txt file and add contents to it. The data is extracted from the file\nSTAGE 2. Total frequencies of all the characters are calculated\nSTAGE 3. Characters are arranged according to the desceding order of their frequencies\nSTAGE 4. Codewords for each character is generated\nSTAGE 5. Extract the codewords\nSTAGE 6. Split then into 8 bits each\nSATGE 7. Compress each of 8 bits to one character\nSTAGE 8. Convert the compressed character into binary\nSTAGE 9. Compare the size of original file and compressed file";
  cout<<"\n\n\nPress Enter to Continue...";
  cin.get();
  cout<<"\n\n";
	cout<<"Reading test.txt file";
	Sleep(500);
	cout<<".";
	Sleep(500);
	cout<<".";
	Sleep(500);
	cout<<".";
	Sleep(500);
	cout<<".";
	Sleep(500);
	cout<<".";
	Sleep(500);
	cout<<".";
	inFile.open("test.txt");
	if (!inFile)
	{
	  cout << "The input file could not be opened."<<endl;
		Sleep(500);
		cout<<".";
		Sleep(500);
		cout<<".";
		cout<<"\nMight be you've to check your file name!\n";
	  exit(0);
	}
	for(int i=0;i<127;i++) //127 cause only 127 characters are acceptable by this algorithm. These 127 characters are specified in our output.
	{
		//cout<<"Char("<<i<<")="<<char(i)<<endl;
		pi[i].getd(char(i),0);
	}
   	ch = inFile.get(); //get the character from the input file
   	while (ch != EOF) //check whether end of file condition is reached
	{
		pi[int(ch)].freq++; //increment the freq of a character once u read it
    	ch = inFile.get();
   	}
}

void wtfile(int h) //func for concatenatinating the binary no.s/codeword from codeword.txt file
{
	ifstream inFile;
	ofstream outfile;
  outfile.open("1_Codeword.txt");
	char ch;
	cout<<endl;
	cout<<"\nReading test.txt file"<<endl;
	cout<<"\nGenerating 1_Codeword.txt file ";
	Sleep(500);
	cout<<".";
	Sleep(500);
	cout<<".";
	Sleep(500);
	cout<<".";
	Sleep(500);
	cout<<".";
	Sleep(500);
	cout<<".";
	Sleep(500);
	cout<<".";
	inFile.open("test.txt");
	if (!inFile)
	{
	  cout << "\nThe input file could not be opened."<<endl;
	  exit(0);
	}

   	ch = inFile.get();
   	int i;
	while (ch != EOF)
	{
		i=h; //assign value of h to i
		while(pi[i].ch!=ch)
		{
			i++;
		}
		outfile<<pi[i].codw;
    	ch = inFile.get();
   	}
   	outfile.close();
   	cout<<"\nFILE 1_Codeword.txt GENERATED!\n"<<endl;
}

int binTOdec(string binaryString)
{
	int value = 0;
	int indexCounter = 0;
	for(int i=binaryString.length()-1;i>=0;i--)
	{
	    if(binaryString[i]=='1'){
	        value += pow(2, indexCounter);
	    }
    indexCounter++;
	}
	return value;
}


void cp()
{
	ifstream inFile;
	ofstream outfile;
	outfile.open("2_CodewordCompressed.txt");
	char ch;
	cout<<"Reading 1_Codeword.txt file"<<endl; //compressing data from 1_Codeword.txt file.
	cout<<"\nGenerating 2_CodewordCompressed.txt file";
	Sleep(500);
	cout<<".";
	Sleep(500);
	cout<<".";
	Sleep(500);
	cout<<".";
	Sleep(500);
	cout<<".";
	Sleep(500);
	cout<<".";
	Sleep(500);
	cout<<".\n";
	inFile.open("1_Codeword.txt");
	if (!inFile)
	{
	  cout << "\nThe input file could not be opened."<<endl;
	  exit(0);
	}
   	ch = inFile.get(); //reading each bit from 1_Codeword.txt
   	int i=0,lmt=0;
		cout<<"\n\nCOMPRESSED CHARACTERS\n\n"<<endl;
	//cout<<"\n\n\tCHAR\tINT\tBINARY\t\t"<<endl;
	while (ch != EOF)
	{
		cnks[i].b8=cnks[i].b8+ch; //cnks[] is empty.Add each of bits here.
		while(cnks[i].b8.length()!=8)//consider 8 bits at a time.Each byte will represent a compressed character
		{
			ch = inFile.get();
			if(ch == EOF) //if the end byte(8), there are less than 8 bits append 0 there
			{
				lmt++;
				ch = '0';
			}
			cnks[i].b8=cnks[i].b8+ch; //append the character with 0 and convert to compressed character
		}
		cnks[i].d8 = char(binTOdec(cnks[i].b8)); //convert the 8 bits to integer.
		cnks[i].i8 = int(cnks[i].d8);
		cout<<"\t"<<cnks[i].d8<<"\n";
		//cout<<"\t"<<cnks[i].d8<<"\t"<<cnks[i].i8<<"\t"<<cnks[i].b8<<"\t"<<endl;
		outfile<<cnks[i].d8;
		ch = inFile.get();
    	i++;
   	}
   	actual = (i*8)-lmt; //actual size= original number of bits from user's input file*8 - 0s appended
   	outfile.close();
   	cout<<"\n\nFILE 2_CodewordCompressed.txt GENERATED!\n\n\n\n"<<endl;
   	Sleep(100);
}



void boc() //binary of compressed
{
	ifstream inFile;   // input file
	ofstream outfile;	//output file

	outfile.open("3_BinaryOfCompressed.txt");

	char ch;
	cout<<"Reading 2_CodewordCompressed.txt file\n"<<endl;
	cout<<"Generating 3_BinaryOfCompressed.txt file\n.";
	Sleep(500);
	cout<<" ";
	Sleep(500);
	cout<<" ";
	Sleep(500);
	cout<<" ";
	Sleep(500);
	cout<<" ";
	inFile.open("2_CodewordCompressed.txt");
	if (!inFile)
	{
	  cout << "\nThe input file could not be opened."<<endl;
	  exit(0);
	}
   	ch = inFile.get();
   	int i=0;
   	cout<<"\nResults In 3_BinaryOfCompressed\n\n"<<endl;
   	cout<<"\tCharacter\tBinary"<<endl;

	while(ch != EOF)
	{
		while (ch != EOF)
		{
			bitset<8> bin_x(ch);
			outfile<<bin_x;
			cout<<"  BINARY ="<<bin_x<<endl;
			ch = inFile.get();
			cout<<"CHAR   "<<ch;

			//cout<<"CHAR "<<ch<<"\t"<<int(ch)<<"\t\t";
		}

	   	ch = inFile.get();
	}


	cout<<"\nGenerated 3_BinaryOfCompressed.txt file!"<<endl;
   	Sleep(500);
   	outfile.close();

}

void compsize()
{
	ifstream iff;

	iff.open("test.txt"); //enter Your input file path with name
	iff >> std::noskipws;
	char ch;
	int siz=0;
	while(iff>>ch)
	{
		siz++;
	}
	cout<<"\n\n\t\tFile Name\t  ||\tSize\n\n";
	cout<<"\t ACTUAL FILE    \t||\t"<<siz<<" Bytes";
	iff.close();
	iff >> std::noskipws;
	iff.open("2_CodewordCompressed.txt"); //enter Your input file path with name
	siz=0;
	while(iff>>ch)
	{
		siz++;
	}
	cout<<"\n\n\tCOMPRESSED FILE \t||\t"<<siz<<" Bytes"<<"\n\n";
	iff.close();
}

void dcp(int h)
{
	ifstream inFile;
	ofstream outfile;

	inFile.open("3_BinaryOfCompressed.txt");
	outfile.open("4_DecompressedFile.txt");
	cout<<"\n\nReading 3_BinaryOfCompressed.txt file\n"<<endl;
	cout<<"\nGenerating 4_DecompressedFile.txt file\n";
	Sleep(500);
	cout<<".";
	Sleep(500);
	cout<<".";
	Sleep(500);
	cout<<".";
	Sleep(500);
	cout<<".";
	Sleep(500);
	cout<<".";
	Sleep(500);
	cout<<".";
	if(!inFile)
	{
		cout << "The input file could not be opened."<<endl;
	  	exit(0);
	}
	char ch;
	ch = inFile.get();
	string str="";
	for(int i=0;i<actual;i++)
	{
		str=str+ch;
		for(int k=h;k<127;k++)
		{
			if(pi[k].codw==str)
			{
				outfile<<pi[k].ch;
				str="";
			}
		}
		ch = inFile.get();
	}
	outfile.close();
	cout<<"\nGENERATED 4_DecompressedFile.txt FILE!\n"<<endl;

}



int main()
{
	int i,j,k,n;
	int sum_1=0,sum_2=0;
	int mind=10000;
	int t=0;
	int diff=0;
	int pt;
	n=127;
	rdfile();

	for(i=0;i<n-1;i++)
	{
		for(j=0;j<n-i-1;j++)
		{
			if(pi[j].freq>pi[j+1].freq) //arrange the characters in terms of the frequencies in ascendig order
			{
				SF tmp; //create temporary variable
				tmp=pi[j]; //do the swap operation
				pi[j]=pi[j+1];
				pi[j+1]=tmp;
			}
		}
	}
	int h;
	for(i=0;i<n;i++) //n is 127
	{
		if(pi[i].freq!=0)
		{
			h=i; //h will give the count of characters having freq 1 or >1
			break;
		}
	}
		cout<<"\n\n\n";
		cout<<"\n------ARRANGING BASED ON FREQUENCY-----------\n\n\n";
	for(i=h;i<n;i++)
	{
		pi[i].display(); //displaying after the swap operation
	}

	shan(h,n-1); //function to generate codeword. n is 127
	ofstream codfile;
	codfile.open("CodeWordFile.txt"); //store codeword here in this file

	for(i=h;i<n;i++)
	{
		codfile<<pi[i].ch<<" ||  Freq="<<pi[i].freq<<"  ||   Codeword="<<pi[i].codw<<endl; //CodeWord file will store and be of the form letter||Freq||Codeword (Ex: A||2||100)
		pi[i].cop(); //displaying in terminal
	}
	codfile.close();
	wtfile(h); //func to concatenate codeowrd files
	cp(); //to generate compressed char
	cout<<"\n\nNOW COMPARING BETWEEN ACTUAL AND COMPRESSED\nACTUAL FILE(BINARY): "<<actual<<endl<<"\n\n";
	boc();
	dcp(h);
	compsize();
	return 0;
}
